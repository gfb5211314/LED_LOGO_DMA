#include  "bsp_esp32.h"
#include "stm32f1xx_hal.h"
#include "esp32_app.h"
#include "stm32f1xx_hal.h"
#include "string.h"
#include <stdlib.h>
#include "bsp_usart.h"


extern UART_HandleTypeDef huart3;
extern USART_RECEIVETYPE  UsartType3;
/*******************
set wifi  ap
********************/
const uint8_t at_rst_command[]="AT+RST\r\n";    //reset valid
const uint8_t at_command[]="AT\r\n";          //check module  normal
const uint8_t at_cwmode_command[]="AT+CWMODE=3\r\n";  //AP  server  open wifi  hot pints
const uint8_t at_start_wifi_command[]="AT+CWSAP=\"ESP32\",\"1234567890\",5,3,5\r\n";
const uint8_t at_cipmux[]="AT+CIPMUX=1\r\n";            //0 : one connection  1: multi connection
//const uint8_t at_cipservermaxconn[]="AT+CIPSERVERMAXCONN=2\r\n";   //set the maximum number of connections   ,allow two  join in
const uint8_t at_cipserver[]="AT+CIPSERVER=1,8080\r\n";   // build TCP SERVER  PORT :8080
// const uint8_t at_cipserver[]="AT+CIPSERVER=1,433,SSL,1";   // build ssL SERVER  PORT :8080

const uint8_t at_cipsend[]="AT+CIPSEND=0,5\r\n"; //send data ti client


/********************
set wifi sta
*1: send at command
*2: send at_cwmode command   1 set sta  client mode
*3: send at_rst    command    reset valid
*4: send at_cwjap  command    connection tcp server
*********************/

const uint8_t at_cwjap[]="AT+CWJAP=adc,0123456\r\n";


/*********************
    set ble
	 *1:                        ble  init
	 *2:                        set ble addr
	 *3:                        set ble name
    *4:		                    set  ble param
	 *5:
**********************/


const uint8_t at_bleinit[]="AT+BLEINTIT=1\r\n"; //0: logout ble   1: client role  2: server role
const uint8_t at_bleaddr[]="AT+BLEADDR=1,F8:7F:24:87:1C:F7\r\n"; // 0 :public addr 1:random address
const uint8_t at_blename[]="AT+BLENAME=\"esp_demo\"\r\n";   /// set ble name esp_demo
const uint8_t at_blescanparam[]="AT+BLESCANPARAM=0,0,0,100,50\r\n"; //scan_type 0: PASSIVE SCAN  1:ACTIVE SCAN   addr_type 0:public address  1:random address 2:rpa public address
const uint8_t at_blescan[]="AT+BLESCAN=1\r\n"; //0: stop scan  1: start scan
// const uint8_t at_blescanrspdata[]="112233445566\r\n"; //AT+BLEINIT=2 init to server,can to use
// const uint8_t at_bleadvparam[]="AT+BLEADVPARAM=50,50,0,0,4,0,0,"12:34:45:78:66:88"; //AT+BLEINIT=2 init to server,can to use
// const uint8_t at_bleadvdata[]="112233445566\r\n";  set ble broadcast data ,init to server,can to use

//const uint8_t at_bleadvstart[]="AT+BLEADVSTART\r\n";   //start  broadcast  init to server,can to use
const uint8_t at_bleconn[]="AT+BLECONN=024:0a:c4:09:34:23\r\n"; // AT+BLEINIT=1	 set ble mode is client  ,connection is valid;


/********************************************
       set esp reset
********************************************/
uint8_t esp32_set_rst_command(const uint8_t *prst, uint16_t wait_time)
{
  
    HAL_UART_Transmit_DMA(&huart3, (uint8_t*)prst, strlen((char *)prst));
    HAL_Delay(wait_time);
	    
    if(strstr((const char*)UsartType3.RX_pData, "OK") != NULL)
    {
        UsartType3.RX_flag = 0;
        memset(UsartType3.RX_pData, 0, sizeof(UsartType3.RX_pData));
        return 1;

    }
    else
    {
        UsartType3.RX_flag = 0;
        memset(UsartType3.RX_pData, 0, sizeof(UsartType3.RX_pData));
        return 0;
    }
 
}
/*********************************
 set WIFI ap
*********************************/
	uint8_t esp32_set_WIFI_MODE_command(const uint8_t *pmode, uint16_t wait_time)
{
  
    HAL_UART_Transmit_DMA(&huart3, (uint8_t*)pmode,strlen((char *)pmode));
    HAL_Delay(100);
  printf("2%s",UsartType3.RX_pData);
	  printf(" UsartType3.RX_flag=%d", UsartType3.RX_flag);
    if(strstr((const char*)UsartType3.RX_pData, "OK") != NULL)
    {
        UsartType3.RX_flag = 0;
        memset(UsartType3.RX_pData, 0, sizeof(UsartType3.RX_pData));
        return 1;

    }
    else
    {
        UsartType3.RX_flag = 0;
        memset(UsartType3.RX_pData, 0, sizeof(UsartType3.RX_pData));
        return 0;
    }

}

/*********************************
 set WIFI ap start
*********************************/
	uint8_t esp32_set_WIFI_start_command(const uint8_t *pstart, uint16_t wait_time)
{
  
    HAL_UART_Transmit_DMA(&huart3, (uint8_t*)pstart,strlen((char *)pstart));
    HAL_Delay(wait_time);
 
    if(strstr((const char*)UsartType3.RX_pData, "OK") != NULL)
    {
        UsartType3.RX_flag = 0;
        memset(UsartType3.RX_pData, 0, sizeof(UsartType3.RX_pData));
        return 1;

    }
    else
    {
        UsartType3.RX_flag = 0;
        memset(UsartType3.RX_pData, 0, sizeof(UsartType3.RX_pData));
        return 0;
    }

}
/*********************************
 set WIFI ap server  multilink 
*********************************/
	uint8_t esp32_set_WIFI_cipmux_command(const uint8_t *pcipmux, uint16_t wait_time)
{
  
    HAL_UART_Transmit_DMA(&huart3, (uint8_t*)pcipmux,strlen((char *)pcipmux));
    HAL_Delay(wait_time);

    if(strstr((const char*)UsartType3.RX_pData, "OK") != NULL)
    {
        UsartType3.RX_flag = 0;
        memset(UsartType3.RX_pData, 0, sizeof(UsartType3.RX_pData));
        return 1;

    }
    else
    {
        UsartType3.RX_flag = 0;
        memset(UsartType3.RX_pData, 0, sizeof(UsartType3.RX_pData));
        return 0;
    }

}
/*********************************
 build WIFI ap server and set port 
*********************************/
	uint8_t esp32_set_WIFI_server_command(const uint8_t *pserver, uint16_t wait_time)
{
  
    HAL_UART_Transmit_DMA(&huart3, (uint8_t*)pserver,strlen((char *)pserver));
    HAL_Delay(wait_time);

    if(strstr((const char*)UsartType3.RX_pData, "OK") != NULL)
    {
        UsartType3.RX_flag = 0;
        memset(UsartType3.RX_pData, 0, sizeof(UsartType3.RX_pData));
        return 1;

    }
    else
    {
        UsartType3.RX_flag = 0;
        memset(UsartType3.RX_pData, 0, sizeof(UsartType3.RX_pData));
        return 0;
    }

}

void esp32_wifi_init(uint8_t mode,uint16_t wait_time  )
{
	 if(mode==1)
	 {
		  if(esp32_set_rst_command(at_rst_command, wait_time))
			{
				printf("rst_success\r\n");
			}else
			{
					printf("rst_fail\r\n");
			}
			  if(esp32_set_WIFI_MODE_command(at_cwmode_command, wait_time))
			{
				printf("mode_success\r\n");
			}else
			{
					printf("mode_fail\r\n");
			}
				  if(esp32_set_WIFI_start_command(at_start_wifi_command, wait_time))
			{
				printf("start_success\r\n");
			}else
			{
					printf("start_fail\r\n");
			}
					  if(esp32_set_WIFI_cipmux_command(at_cipmux, wait_time))
			{
				printf("multilink_success\r\n");
			}else
			{
					printf("multilink_fail\r\n");
			}
					  if(esp32_set_WIFI_cipmux_command(at_cipserver, wait_time))
			{
				printf("server_success\r\n");
			}else
			{
					printf("server_fail\r\n");
			}	 
	 }
}




